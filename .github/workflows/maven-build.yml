name: Backend CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-push-to-ECR:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    # Step 3: Build backend JAR
    - name: Build backend with Maven
      working-directory: ./backend
      run: mvn clean package -DskipTests

    # Step 4: Run unit tests
    - name: Run unit tests
      working-directory: ./backend
      run: mvn test

    # Step 5: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 6: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 7: Build, tag, and push image to ECR
    - name: Build, Tag, and Push Docker image
      run: |
        IMAGE_URI=${{ secrets.ECR_REPOSITORY }}

        echo "Building Docker image..."
        docker build -t inventory-app ./backend

        echo "Tagging Docker image..."
        docker tag inventory-app $IMAGE_URI:${{ github.sha }}
        docker tag inventory-app $IMAGE_URI:latest

        echo "Pushing Docker image to ECR..."
        docker push $IMAGE_URI:${{ github.sha }}
        docker push $IMAGE_URI:latest



  deploy-to-ECS:
    needs: build-and-push-to-ECR
    runs-on: ubuntu-latest

    steps:
    # Step 1: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 2: Download existing ECS task definition
    - name: Download current ECS task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition inventory-backend-task \
          --query taskDefinition > task-definition.json

    # Step 3: Update image URI in task definition with new SHA tag
    - name: Update ECS task definition image
      run: |
        jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-definition.json

    # Step 4: Register new task definition revision
    - name: Register new ECS task definition
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-definition.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)

    # Step 5: Deploy the new revision to ECS
    - name: Deploy new revision to ECS service
      run: |
        aws ecs update-service \
          --cluster inventory-cluster \
          --service inventory-backend-service \
          --task-definition $TASK_DEF_ARN \
          --force-new-deployment \
          --region ${{ secrets.AWS_REGION }}

        
